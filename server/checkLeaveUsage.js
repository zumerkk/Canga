const mongoose = require('mongoose');
const fs = require('fs');
const csv = require('csv-parser');
const path = require('path');
const Employee = require('./models/Employee');
const AnnualLeave = require('./models/AnnualLeave');
require('dotenv').config();

// MongoDB baƒülantƒ±sƒ±
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => {
  console.log('‚úÖ MongoDB baƒülantƒ±sƒ± ba≈üarƒ±lƒ±');
  checkLeaveUsage();
}).catch(err => {
  console.error('‚ùå MongoDB baƒülantƒ± hatasƒ±:', err);
});

// ƒ∞simleri normalize et (b√ºy√ºk harf, T√ºrk√ße karakter)
function normalizeName(name) {
  return name
    .toUpperCase()
    .replace(/ƒ∞/g, 'I')
    .replace(/√ñ/g, 'O')
    .replace(/√ú/g, 'U')
    .replace(/ƒû/g, 'G')
    .replace(/≈û/g, 'S')
    .replace(/√á/g, 'C')
    .trim();
}

// CSV'den izin kullanƒ±mlarƒ±nƒ± kontrol et
async function checkLeaveUsage() {
  try {
    console.log('üîÑ ƒ∞zin kullanƒ±m kontrol√º ba≈ülƒ±yor...');
    
    // CSV dosyasƒ±ndan verileri oku
    const csvData = [];
    const csvPath = path.join(__dirname, '..', 'csv exel', 'leave_usage.csv');
    
    await new Promise((resolve, reject) => {
      fs.createReadStream(csvPath)
        .pipe(csv())
        .on('data', (row) => {
          // Yƒ±llƒ±k izin verilerini sayƒ±ya √ßevir
          const yearlyData = {};
          const years = Object.keys(row).filter(key => !isNaN(key));
          
          years.forEach(year => {
            const value = parseFloat(row[year]);
            if (!isNaN(value)) {
              yearlyData[year] = value;
            }
          });

          csvData.push({
            adSoyad: row['ADI SOYADI'],
            normalizedName: normalizeName(row['ADI SOYADI']),
            total: parseFloat(row['TOPLAM']) || 0,
            yearlyUsage: yearlyData
          });
        })
        .on('end', resolve)
        .on('error', reject);
    });

    console.log(`üìä CSV'den ${csvData.length} kayƒ±t okundu`);

    // Manuel alias e≈üle≈ütirmeleri (CSV <> DB yazƒ±m farklarƒ±nƒ± gidermek i√ßin)
    const aliasMap = {
      'EYUP UNVANLI': 'EYYUP UNVANLI',
      'MEHMET KEMAL INANC': 'MEHMET KEMAL INAC'
    };

    // Veritabanƒ±ndaki t√ºm √ßalƒ±≈üanlarƒ± getir
    const dbEmployees = await Employee.find({}).select('_id adSoyad');
    console.log(`üìä Veritabanƒ±nda ${dbEmployees.length} √ßalƒ±≈üan bulundu`);

    // ƒ∞zin kayƒ±tlarƒ±nƒ± getir
    const leaveRecords = await AnnualLeave.find({});
    console.log(`üìä Veritabanƒ±nda ${leaveRecords.length} izin kaydƒ± bulundu`);

    // Kar≈üƒ±la≈ütƒ±rma yap
    const discrepancies = [];
    let matchCount = 0;
    let mismatchCount = 0;
    let notFoundInCSV = [];

    for (const dbEmp of dbEmployees) {
      let normalizedDbName = normalizeName(dbEmp.adSoyad);
      // Alias uygula
      if (aliasMap[normalizedDbName]) {
        normalizedDbName = aliasMap[normalizedDbName];
      }
      const csvEmp = csvData.find(e => normalizeName(e.adSoyad) === normalizedDbName);
      
      if (csvEmp) {
        // ƒ∞zin kaydƒ±nƒ± bul
        const leaveRecord = leaveRecords.find(r => r.employeeId.toString() === dbEmp._id.toString());
        
        if (leaveRecord) {
          // Her yƒ±l i√ßin kar≈üƒ±la≈ütƒ±r
          const years = Object.keys(csvEmp.yearlyUsage);
          let hasDiscrepancy = false;
          const yearlyDiffs = {};

          years.forEach(year => {
            const csvUsage = csvEmp.yearlyUsage[year] || 0;
            const dbYear = leaveRecord.leaveByYear.find(y => y.year === parseInt(year));
            const dbUsage = dbYear ? dbYear.used : 0;

            if (csvUsage !== dbUsage) {
              hasDiscrepancy = true;
              yearlyDiffs[year] = {
                csv: csvUsage,
                db: dbUsage
              };
            }
          });

          if (hasDiscrepancy) {
            discrepancies.push({
              adSoyad: dbEmp.adSoyad,
              csvAdSoyad: csvEmp.adSoyad,
              yearlyDiffs
            });
            mismatchCount++;
          } else {
            matchCount++;
          }
        } else {
          // ƒ∞zin kaydƒ± yoksa ve CSV'de kullanƒ±m varsa
          if (Object.values(csvEmp.yearlyUsage).some(v => v > 0)) {
            discrepancies.push({
              adSoyad: dbEmp.adSoyad,
              csvAdSoyad: csvEmp.adSoyad,
              error: 'Veritabanƒ±nda izin kaydƒ± yok'
            });
            mismatchCount++;
          } else {
            matchCount++;
          }
        }
      } else {
        notFoundInCSV.push(dbEmp.adSoyad);
      }
    }

    // Sonu√ßlarƒ± yazdƒ±r
    console.log('\nüìä KONTROL SONU√áLARI:');
    console.log(`‚úÖ E≈üle≈üen kayƒ±t sayƒ±sƒ±: ${matchCount}`);
    console.log(`‚ùå Uyumsuz kayƒ±t sayƒ±sƒ±: ${mismatchCount}`);
    console.log(`‚ö†Ô∏è CSV'de bulunamayan √ßalƒ±≈üan sayƒ±sƒ±: ${notFoundInCSV.length}`);
    
    console.log('\nüîç UYUMSUZ KAYITLAR:');
    discrepancies.forEach((disc, index) => {
      console.log(`\n${index + 1}. ${disc.adSoyad} (CSV: ${disc.csvAdSoyad})`);
      if (disc.error) {
        console.log('   Hata:', disc.error);
      } else {
        console.log('   Yƒ±llƒ±k farklƒ±lƒ±klar:');
        Object.entries(disc.yearlyDiffs).forEach(([year, diff]) => {
          console.log(`   ${year}: CSV=${diff.csv}, DB=${diff.db}`);
        });
      }
    });

    if (notFoundInCSV.length > 0) {
      console.log('\n‚ö†Ô∏è CSV\'DE BULUNAMAYAN √áALI≈ûANLAR:');
      notFoundInCSV.forEach((name, i) => {
        console.log(`${i + 1}. ${name}`);
      });
    }

    // Sonu√ßlarƒ± dosyaya kaydet
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        totalDbEmployees: dbEmployees.length,
        totalCsvRecords: csvData.length,
        matchCount,
        mismatchCount,
        notFoundCount: notFoundInCSV.length
      },
      discrepancies,
      notFoundInCSV
    };

    fs.writeFileSync(
      'leave_check_report.json',
      JSON.stringify(report, null, 2)
    );

    console.log('\n‚úÖ Rapor leave_check_report.json dosyasƒ±na kaydedildi');
    process.exit(0);

  } catch (error) {
    console.error('‚ùå Hata:', error);
    process.exit(1);
  }
} 