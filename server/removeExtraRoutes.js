const path = require('path');
const dotenv = require('dotenv');
const mongoose = require('mongoose');
const ServiceRoute = require('./models/ServiceRoute');

dotenv.config({ path: path.resolve(__dirname, '.env') });

async function removeExtraRoutes() {
  await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/canga');
  
  console.log('üóëÔ∏è  Fazla g√ºzergahlarƒ± siliyorum...\n');
  
  // Mevcut g√ºzergahlarƒ± listele
  const allRoutes = await ServiceRoute.find({});
  console.log('üìã Mevcut g√ºzergahlar:');
  allRoutes.forEach((route, idx) => {
    console.log(`   ${idx + 1}. "${route.routeName}" (${route.status}) - ${route.stops?.length || 0} durak`);
  });
  console.log('');
  
  let removed = 0;
  
  // 1) "19-24 AƒûUSTOS 2024 SERVƒ∞S G√úZERGAHLARI" adlƒ± g√ºzergahƒ± sil
  const augustRoute = await ServiceRoute.findOne({ 
    routeName: { $regex: /19.*24.*AƒûUSTOS.*2024/i }
  });
  
  if (augustRoute) {
    console.log(`‚ùå Siliniyor: "${augustRoute.routeName}"`);
    await augustRoute.deleteOne();
    removed++;
  } else {
    console.log('‚ö†Ô∏è  "19-24 AƒûUSTOS 2024" g√ºzergahƒ± bulunamadƒ±');
  }
  
  // 2) ƒ∞simsiz (bo≈ü routeName) g√ºzergahlarƒ± sil
  const emptyNameRoutes = await ServiceRoute.find({
    $or: [
      { routeName: '' },
      { routeName: { $exists: false } },
      { routeName: null },
      { routeName: { $regex: /^\s*$/ } }
    ]
  });
  
  if (emptyNameRoutes.length > 0) {
    console.log(`‚ùå ${emptyNameRoutes.length} isimsiz g√ºzergah siliniyor:`);
    for (const route of emptyNameRoutes) {
      console.log(`   - ID: ${route._id}, routeName: "${route.routeName || 'BO≈û'}", stops: ${route.stops?.length || 0}`);
      await route.deleteOne();
      removed++;
    }
  } else {
    console.log('‚úÖ ƒ∞simsiz g√ºzergah bulunamadƒ±');
  }
  
  // 3) ≈û√ºpheli/ge√ßersiz g√ºzergahlarƒ± kontrol et
  const suspiciousRoutes = await ServiceRoute.find({
    $or: [
      { routeName: { $regex: /SABAH|AK≈ûAM|16-24|24-08/i } },
      { routeName: { $regex: /^\d+$/ } },
      { routeName: { $regex: /^[A-Z]{1,3}\d+$/ } }
    ]
  });
  
  if (suspiciousRoutes.length > 0) {
    console.log(`‚ùå ${suspiciousRoutes.length} ≈ü√ºpheli g√ºzergah siliniyor:`);
    for (const route of suspiciousRoutes) {
      console.log(`   - "${route.routeName}"`);
      await route.deleteOne();
      removed++;
    }
  }
  
  // 4) Final durum
  const finalRoutes = await ServiceRoute.find({ status: 'AKTIF' });
  
  console.log('\nüìä TEMƒ∞ZLƒ∞K SONUCU:');
  console.log('=' * 40);
  console.log(`üóëÔ∏è  Silinen g√ºzergah: ${removed}`);
  console.log(`üöå Kalan aktif g√ºzergah: ${finalRoutes.length}`);
  
  console.log('\n‚úÖ KALAN AKTƒ∞F G√úZERGAHLAR:');
  finalRoutes.forEach((route, idx) => {
    console.log(`   ${idx + 1}. ${route.routeName}`);
    console.log(`      üöè ${route.stops?.length || 0} durak`);
    console.log(`      üé® Renk: ${route.color}`);
    console.log('');
  });
  
  await mongoose.disconnect();
  
  return {
    removed,
    finalCount: finalRoutes.length,
    finalRoutes: finalRoutes.map(r => ({
      name: r.routeName,
      stops: r.stops?.length || 0,
      status: r.status
    }))
  };
}

if (require.main === module) {
  removeExtraRoutes().catch(err => {
    console.error('‚ùå Hata:', err);
    mongoose.disconnect();
  });
}

module.exports = { removeExtraRoutes };
